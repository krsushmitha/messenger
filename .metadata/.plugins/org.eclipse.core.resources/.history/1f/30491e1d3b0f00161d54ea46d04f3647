package org.sush.javamaven.messenger.resources;

import java.net.URI;
import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.sush.javamaven.messenger.model.Message;
import org.sush.javamaven.messenger.service.MessageService;

@Path("/messages")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public class MessageResource {

	MessageService msgService = new MessageService();
	
	@GET
	public List<Message> getMessages(@QueryParam("year") int year,
									@QueryParam("start") int start,
									@QueryParam("size") int size){
		
		if(year > 0){
			return msgService.getAllMessagesForYear(year);
		}
		if(start > 0 && size > 0){
			return msgService.getAllMessagesPaginated(start, size);
		}
		return msgService.getAllMessages();
	}
	
	@POST
	public Response addMessage(Message message){
		
		Message msg = msgService.addMessage(message);
		return Response.created(new URI("/messenger/webapi/messages/"+msg.getId()));
				.entity(msg)
				.build();
		//return msgService.addMessage(message);
	}
	
	@PUT
	@Path("/{messageId}")
	public Message updateMessage(@PathParam("messageId") long messageId, Message message){
		message.setId(messageId);
		return msgService.updateMessage(message);
	}
	
	
	@DELETE
	@Path("/{messageId}")
	public void deleteMessage(@PathParam("messageId") long messageId){
		msgService.removeMsg(messageId);
	}
	
	
	
	@GET
	@Path("/{messageId}")
	public Message test(@PathParam("messageId") long messageId){
		return msgService.getMessage(messageId);
		
	}
	

	@Path("/{messageId}/comments")
	public CommentResource getCommentResource(){
		return new CommentResource();
	}
	
}


